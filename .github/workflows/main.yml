name: CellBase develop main workflow

on:
  push:
    branches:
      - develop
      - next
      - gitHubActionTest
    paths:
      - '**.java'
      - '**.py'
      - '**.xml'
      - '**.yml'

jobs:
  build:
    name: CellBase Build
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '10'
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Maven Build (skip tests)
      run: mvn -T 2 clean install -DskipTests
    - name: Maven Validate
      run: mvn validate
  test:
    name: CellBase Test
    runs-on: ubuntu-18.04
    needs: build
    strategy:
      matrix:
        java: ["1.8"]
        mongodb: ["4.0", "4.2"]
    services:
      mongodb:
        image: mongo:${{ matrix.mongodb }}
        ports:
          - 27017:27017
        env:
          - '--serviceExecutor adaptive'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '10'
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Build with Maven
        run: mvn -T 2 clean install -Dcheckstyle.skip
  deploy:
    name: Build and Deploy CellBase libs, Javadocs and Docker images in Maven Central and DockerHub repositories
    runs-on: ubuntu-18.04
    needs: test
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '10'
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          server-id: ossrh                        # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_NEXUS_USER       # env variable for username in deploy
          server-password: MAVEN_NEXUS_PASSWORD   # env variable for token in deploy

      ## IMPORTANT: this creates the 'build' installation folder and must be the FIRST action!
      ## Deploy in Maven repository
      - name: Copy GPG Private key
        run: echo "${{ secrets.MAVEN_GPG_PRIVATE_KEY }}" > private-key.txt && gpg --import --no-tty --batch --yes private-key.txt
      - name: Deploy to Maven Central respository
        env:
          MAVEN_NEXUS_USER: ${{ secrets.MAVEN_NEXUS_USER }}
          MAVEN_NEXUS_PASSWORD: ${{ secrets.MAVEN_NEXUS_PASSWORD }}
        run: mvn clean deploy -Dgpg.passphrase=${{ secrets.MAVEN_GPG_PASSPHRASE }} -DskipTests -P deploy

      ## Build and deploy Docker images to DockerHub
      - name: Login to dockerhub
        run: docker login -u ${{ secrets.DOCKER_HUB_USER }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Build and publish Docker images to DockerHub
        run: ./build/cloud/docker/docker-build.sh push

      ## Generate and deploy Javadocs
      - name: Get CellBase version
        id: get_version
        run: echo ::set-output name=VERSION::$(grep '<cellbase.version>' pom.xml | sed 's/cellbase.version//g' | sed 's/[<>/ ]//g')
      - name: Generate Javadocs
        run: mvn javadoc:aggregate
#      - name: Deploy Javadocs
#        uses: garygrossgarten/github-action-scp@release
#        with:
#          local: target/site/apidocs
#          remote: /mnt/data/opencb/cellbase/javadocs/${{ steps.get_version.outputs.VERSION }}
#          host: 128.232.224.128
#          username: ${{ secrets.SCP_SITE_USER }}
#          password: ${{ secrets.SCP_SITE_PASSWORD }}
      - name: Create a tar.gz
        run: tar zcvf javadocs.tar.gz target/site/apidocs
      - name: Deploy Javadocs
        uses: garygrossgarten/github-action-scp@release
        with:
#          local: target/site/apidocs
          local: javadocs.tar.gz
          remote: /mnt/data/opencb/cellbase/javadocs/${{ steps.get_version.outputs.VERSION }}
          host: 128.232.224.128
          username: ${{ secrets.SCP_SITE_USER }}
          password: ${{ secrets.SCP_SITE_PASSWORD }}
      - name: Uncompress SSH
        uses: garygrossgarten/github-action-ssh@release
        with:
          command: tar zxvf /mnt/data/opencb/cellbase/javadocs/${{ steps.get_version.outputs.VERSION }}/javadocs.tar.gz
          host: 128.232.224.128
          username: ${{ secrets.SCP_SITE_USER }}
          passphrase: ${{ secrets.SCP_SITE_PASSWORD }}
#          privateKey: ${{ secrets.PRIVATE_KEY}}
  pypi:
    name: Deploy Python package in test PyPI
    runs-on: ubuntu-18.04
    needs: test
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '10'
      - name: Build Python package for PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_TWINE_USER }}
          TWINE_PASSWORD: ${{ secrets.PYPI_TWINE_PASSWORD }}
        run: ./cellbase-client/src/main/python/python-build.sh push-test
  site:
    name: Generate Maven site
    runs-on: ubuntu-18.04
    needs: build
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '10'
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Generate Site with Maven CLI
        run: mvn site
      - name: Prepare Maven Site submodules
        run: cp -r cellbase-app/target/site target/site/cellbase-app &&
              cp -r cellbase-client/target/site target/site/cellbase-client &&
              cp -r cellbase-core/target/site target/site/cellbase-core &&
              cp -r cellbase-lib/target/site target/site/cellbase-lib &&
              cp -r cellbase-server/target/site target/site/cellbase-server
      - name: Get CellBase version
        id: get_version
        run: echo ::set-output name=VERSION::$(grep '<cellbase.version>' pom.xml | sed 's/cellbase.version//g' | sed 's/[<>/ ]//g')
      - name: Get current date in YYMMDD format
        id: get_date
        run: echo ::set-output name=YYMMDD::$(date +%Y%m%d)
      - name: Get current date in HHMMSS format
        id: get_time
        run: echo ::set-output name=HHMMSS::$(date +%H%M%S)
      - name: Deploy Site web recursively to remote
        uses: garygrossgarten/github-action-scp@release
        with:
          local: target/site
          remote: /mnt/data/opencb/cellbase/site/${{ steps.get_version.outputs.VERSION }}/${{ steps.get_date.outputs.YYMMDD }}/${{ steps.get_time.outputs.HHMMSS }}-${{ github.sha }}
          host: 128.232.224.128
          username: ${{ secrets.SCP_SITE_USER }}
          password: ${{ secrets.SCP_SITE_PASSWORD }}

